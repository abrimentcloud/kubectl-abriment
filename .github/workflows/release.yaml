name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  BINARY_NAME: kubectl-abriment

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=v1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Build binaries
        run: |
          mkdir -p dist

          # Linux amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/kubectl-abriment .
          cd dist && tar -czf kubectl-abriment_${{ steps.version.outputs.version }}_linux_amd64.tar.gz kubectl-abriment && cd ..

          # Darwin amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/kubectl-abriment .
          cd dist && tar -czf kubectl-abriment_${{ steps.version.outputs.version }}_darwin_amd64.tar.gz kubectl-abriment && cd ..

          # Darwin arm64
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/kubectl-abriment .
          cd dist && tar -czf kubectl-abriment_${{ steps.version.outputs.version }}_darwin_arm64.tar.gz kubectl-abriment && cd ..

          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/kubectl-abriment.exe .
          cd dist && tar -czf kubectl-abriment_${{ steps.version.outputs.version }}_windows_amd64.tar.gz kubectl-abriment.exe && cd ..

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## kubectl-abriment ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate archive for your platform, extract it, and place the binary in your PATH.

            ### Usage
            ```bash
            kubectl abriment
            kubectl abriment help
            ```

            ### Platform Support
            - Linux (amd64)
            - macOS (amd64, arm64)
            - Windows (amd64)

            ### Verification
            Use the checksums.txt file to verify download integrity:
            ```bash
            sha256sum -c checksums.txt
            ```
          files: |
            dist/*.tar.gz
            dist/checksums.txt
          draft: false
          prerelease: false
  update-krew-manifest:
    name: Update Krew manifest
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download checksums
        run: |
          curl -L -o checksums.txt \
            "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/checksums.txt"

      - name: Update Krew manifest
        run: |
          # Extract SHA256 checksums
          LINUX_SHA256=$(grep "kubectl-abriment_${{ steps.version.outputs.version }}_linux_amd64.tar.gz" checksums.txt | cut -d' ' -f1)
          DARWIN_AMD64_SHA256=$(grep "kubectl-abriment_${{ steps.version.outputs.version }}_darwin_amd64.tar.gz" checksums.txt | cut -d' ' -f1)
          DARWIN_ARM64_SHA256=$(grep "kubectl-abriment_${{ steps.version.outputs.version }}_darwin_arm64.tar.gz" checksums.txt | cut -d' ' -f1)
          WINDOWS_SHA256=$(grep "kubectl-abriment_${{ steps.version.outputs.version }}_windows_amd64.tar.gz" checksums.txt | cut -d' ' -f1)

          # Update abriment.yaml using sed with more specific patterns
          # Update version
          sed -i "s/version: v[0-9]\+\.[0-9]\+\.[0-9]\+/version: ${{ steps.version.outputs.version }}/" plugins/abriment.yaml

          # Update download URLs
          sed -i "s|download/v[0-9]\+\.[0-9]\+\.[0-9]\+/|download/${{ steps.version.outputs.version }}/|g" plugins/abriment.yaml

          # Update filenames in URLs
          sed -i "s/kubectl-abriment_v[0-9]\+\.[0-9]\+\.[0-9]\+_/kubectl-abriment_${{ steps.version.outputs.version }}_/g" plugins/abriment.yaml

          # Create a temporary file with updated SHA256 values
          awk -v linux_sha="$LINUX_SHA256" -v darwin_amd64_sha="$DARWIN_AMD64_SHA256" -v darwin_arm64_sha="$DARWIN_ARM64_SHA256" -v windows_sha="$WINDOWS_SHA256" '
          BEGIN { platform_count = 0 }
          /- selector:/ { platform_count++ }
          /sha256:/ {
              if (platform_count == 1) {
                  # Darwin amd64 (first platform)
                  print "      sha256: " darwin_amd64_sha
              } else if (platform_count == 2) {
                  # Darwin arm64 (second platform)
                  print "      sha256: " darwin_arm64_sha
              } else if (platform_count == 3) {
                  # Linux amd64 (third platform)
                  print "      sha256: " linux_sha
              } else if (platform_count == 4) {
                  # Windows amd64 (fourth platform)
                  print "      sha256: " windows_sha
              } else {
                  print $0
              }
              next
          }
          { print }
          ' plugins/abriment.yaml > plugins/abriment.yaml.tmp && mv plugins/abriment.yaml.tmp plugins/abriment.yaml

          # Verify the update
          echo "Updated manifest:"
          cat plugins/abriment.yaml

      - name: Commit and push updated manifest
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add plugins/abriment.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Krew manifest for ${{ steps.version.outputs.version }}"
            git push origin HEAD:main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
